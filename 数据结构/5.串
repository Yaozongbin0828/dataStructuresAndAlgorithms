一、串的定义
串( string)是由零个或多个字符组成的有限序列，又名叫字符串。
空串：不包含任何字符的串叫空串
子串:串中任意个连续字符组成的子序列称为该串的子串
主串:包含子串的串相应地称为主串
字符位置: 字符在序列中的序号为该字符在串中的位置
子串位置:子串第一个字符在主串中的位置
空格串: 由一个或多个空格组成的串，与空串不同

术语：长度、空串、空格串、串相等、字串、主串、模式匹配（主串：目标串，子串：模式）。
运算：求串长、串连接、求子串、串比较、插入子串、删除子串、模式匹配。
  1.顺序存储（类似线性表）
  2.链接存储
  3.堆分配存储（开辟一块地址连续的存储空间）

二、串的存储结构
1、定长顺序存储表示
类似于线性表的顺序存储结构，用一组地址连续的存储单元存储串值的字符序列。在串的定长顺序存储结构中，为每个串变量分配一个固定长度的存储区，即定长数组。

2、堆分配存储表示
堆分配存储表示仍然以一组地址连续的存储单元存放串值的字符序列，但它们的存储空间是在程序执行过程中动态分配得到的。

3、块链存储表示
类似于线性表的链式存储结构，也可采用链表方式存储串值。由于串的特殊性(每个元素只有一个字符)，在具体实现时，每个结点既可以存放一个字符， 也可以存放多个字符。
每个结点称为块，整个链表称为块链结构。图(a)是结点大小为4 (即每个结点存放4个字符)的链表,最后一个结点占不满时通常用“#”补上;图(b)是结点大小为1的链表。

三、串的基本操作
StrAssign(&T, chars): 赋值操作。把串T赋值为 chars
Strcopy(&T, S): 复制操作。由串S复制得到串T。
StrEmpty(S): 判空操作。若S为空串,则返回TRUE,否则返回 FALSE
StrCompare(S,T): 比较操作。若S>T,则返回值>0;若S=T,则返回值=0;若S<T,则返回值<0。
StrEngth(S): 求串长。返回串S的元素个数
Substring(&Sub,S,pos,1en):求子串。用Sub返回串S的第pos个字符起长度为len的子串。
Concat(&T,S1,S2): 串联接。用T返回由S1和S2联接而成的新串。
Index(S,T): 定位操作。若主串S中存在与串T值相同的子串,则返回它在主串S中第一次出现的位置;否则函数值为0
Clearstring(&S): 清空操作。将S清为空串
Destroystring(&S): 销毁串。将串S销毁
不同的高级语言对串的基本操作集可以有不同的定义方法。在上述定义的操作中,串赋值StrAssign、串比较 StrCompare、求串长 Strength、串联接 Concat及求子串 Substring五种操作构成串类型的最小操作子集,即这些操作不可能利用其他串操作来实现;
反之,其他串操作(除串清除 Clearstring和串销毁 Destroystring外)均可在该最小操作子集上实现。
例如,可利用判等、求串长和求子串等操作实现定位函数 Index(S,T)。

四、串的模式匹配（重点）
1、简单的模式匹配算法
子串的定位操作通常称为串的模式匹配，它求的是子串(常称模式串)在主串中的位置。这里采用定长顺序存储结构，给出一种不依赖于其他串操作的暴力匹配算法。

2、KMP算法(特点：仅仅后移模式串，比较指针不回溯。)
在上面的简单匹配中，每趟匹配失败都是模式后移一位再从头开始比较。而某趟已匹配相等的字符序列是模式的某个前缀，这种频繁的重复比较相当于模式串在不断地进行自我比较，这就是其低效率的根源。
因此，可以从分析模式本身的结构着手，如果已匹配相等的前缀序列中有某个后缀正好是模式的前缀，那么就可以将模式向后滑动到与这些相等字符对齐的位置，主串i指针无须回溯，并继续从该位置开始进行比较。
而模式向后滑动位数的计算仅与模式本身的结构有关，与主串无关。

例题：
1.串的长度是指(B)。
A，串中所含不同字母的个数
B，串中所含字符的个数
C，串中所含不同字符的个数
D。串中所含非空格字符的个数
[答案]B。串中字符的数目称为串的长度

2.串”ababaaababaa”的next 数组为(C)。
A.012345678999
B.012121111212
C.011234223456
D.012301232234

串”ababaabab”的nextval为(A)。
B.010102101
A.010104101
C.010100011
D.010101011
[答案]A。

